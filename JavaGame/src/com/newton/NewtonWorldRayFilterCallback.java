// Generated by jextract

package com.newton;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface NewtonWorldRayFilterCallback {

    float apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4, jdk.incubator.foreign.MemoryAddress x5, float x6);
    static MemoryAddress allocate(NewtonWorldRayFilterCallback fi) {
        return RuntimeHelper.upcallStub(NewtonWorldRayFilterCallback.class, fi, constants$12.NewtonWorldRayFilterCallback$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;F)F");
    }
    static MemoryAddress allocate(NewtonWorldRayFilterCallback fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonWorldRayFilterCallback.class, fi, constants$12.NewtonWorldRayFilterCallback$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;F)F", scope);
    }
    static NewtonWorldRayFilterCallback ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, long x4, jdk.incubator.foreign.MemoryAddress x5, float x6) -> {
            try {
                return (float)constants$12.NewtonWorldRayFilterCallback$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


