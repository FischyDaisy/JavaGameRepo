// Generated by jextract

package com.newton;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface NewtonOnCompoundSubCollisionAABBOverlap {

    int apply(jdk.incubator.foreign.MemoryAddress x0, float x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6);
    static MemoryAddress allocate(NewtonOnCompoundSubCollisionAABBOverlap fi) {
        return RuntimeHelper.upcallStub(NewtonOnCompoundSubCollisionAABBOverlap.class, fi, constants$13.NewtonOnCompoundSubCollisionAABBOverlap$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;FLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I");
    }
    static MemoryAddress allocate(NewtonOnCompoundSubCollisionAABBOverlap fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(NewtonOnCompoundSubCollisionAABBOverlap.class, fi, constants$13.NewtonOnCompoundSubCollisionAABBOverlap$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;FLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;I)I", scope);
    }
    static NewtonOnCompoundSubCollisionAABBOverlap ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, float x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, int x6) -> {
            try {
                return (int)constants$13.NewtonOnCompoundSubCollisionAABBOverlap$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


